# -*- coding: utf-8 -*-
"""álgebra lineal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M6cg83A15zQPNvzunMtuBhIeRrX7YALo
"""

# import bibliotecas
import numpy as np
import matplotlib.pyplot as plt

"""<h2>Métodos auxiliares para graficación</h2>"""

def aux_plot(plot):
    plot.spines['left'].set_position('zero')
    plot.spines['bottom'].set_position('zero')
    plot.spines['right'].set_color('none')
    plot.spines['top'].set_color('none')
    plot.xaxis.set_ticks_position('bottom')
    plot.yaxis.set_ticks_position('left')

def plot_courves(x, y1, y2, title_1, title_2, title_3):

    # Placing the plots in the plane

    plot1 = plt.subplot2grid(shape=(2, 2), loc=(0, 0))
    plot1.set_title(title_1)
    aux_plot(plot1)

    plot2 = plt.subplot2grid(shape=(2, 2), loc=(0, 1))
    plot2.set_title(title_2)
    aux_plot(plot2)

    plot3 = plt.subplot2grid((2, 2), (1, 0), colspan=2)
    plot3.set_title(title_3)

    plot1.plot(x, y1 )
    plot2.plot(x, y2 )

    plot3.plot(x,y1)
    plot3.plot(x,y2)

    plot1.grid(visible=True,  axis='both')
    plot2.grid(visible=True,  axis='both')
    plot3.grid(visible=True,  axis='both')
    plt.show()

"""El presente módulo ejemplifica:
1) Cómo programar un sistema de ecuaciones
2) Cómo resolver el sistema
3) Cómo graficar la solución del sistema de ecuaciones
<h2>Sistema de ecuaciones 1</h2>
<table width=100%>
  <tr>
    <th align="center"> Num </th>
    <th> Ecuación </th>
    <th> Despeje </th>
  </tr>
  <tr>
    <td align="center"> Ec.1 </td>
    <td align="center"> x + y = 10 </td>
    <td align="center"> y = 10 - x </td>
  </tr>
  <tr>
    <td align="center"> Ec. 2 </td>
    <td align="center"> x + 2y = 12 </td>
    <td align="center"> y = (12-x)/2 </td>
  </tr>
</table>
"""

def sist_ec_1( x ):
    y1 = 10 -x
    y2 = (12- x)/2.0

    return y1, y2

"""<h2> Sistema de ecuaciones 2 </h2>

<table width=100%>
  <tr>
    <th align="center"> Num </th>
    <th> Ecuación </th>
    <th> Despeje </th>
  </tr>
  <tr>
    <td align="center"> Ec. 1 </td>
    <td align="center"> x + y = 10 </td>
    <td align="center"> y = 10 - x </td>
  </tr>
  <tr>
    <td align="center"> Ec. 2 </td>
    <td align="center"> 2x + 2y = 20 </td>
    <td align="center"> y = (20-2x)/2 </td>
  </tr>
</table>
"""

def sist_ec_2(x):
    y1 = 10 - x
    y2 = (20 -2*x)/2.0

    return y1, y2

"""<h2> Sistema de ecuaciones 3 </h2>

<table width=100%>
  <tr>
    <th align="center"> Num </th>
    <th> Ecuación </th>
    <th> Despeje </th>
  </tr>
  <tr>
    <td align="center"> Ec.1 </td>
    <td align="center"> x + y = 10 </td>
    <td align="center"> y = 10 - x </td>
  </tr>
  <tr>
    <td align="center"> Ec. 2 </td>
    <td align="center"> 2x + 2y = 24 </td>
    <td align="center"> y = (24 - 2x)/2 </td>
  </tr>
</table>
"""

def sist_ec_3(x):
    y1 = 10 -x
    y2 = (24 - 2*x)/2.0

    return y1, y2

"""<h2> Funciones auxiliar para graficación y evaluación de funciones </h2>

'gen_x_values': Genera los puntos de la variable x, para evaluar las ecuaciones anteriores
'low_limit': límite inferior <br>
'high_limit': límite superior <br>
'num_samples': número de puntos en el eje x a generar
"""

def gen_x_values(low_limit, high_limit, num_samples):

    x_values = np.linspace(low_limit, high_limit, num=num_samples)

    return  x_values

"""'evaluale_sist_ec_1': Función que evalúa el sistema de ecuaciones 1 anteriores

1. Genera los puntos del eje $x$ para evaluar las funciones.
2. 'sist_ec_1' evalua el sistema de ecuaciones 1 con los puntos del arreglo/vector $x$.
3. 'plot_courves' grafica las curvas del sistema de ecuaciones 1.
"""

def evaluale_sist_ec_1():
    #general los valores de x para evaluar las fuinciones

    x = gen_x_values(low_limit=-10, high_limit= 15, num_samples= 30)

    y1, y2 = sist_ec_1(x)

    plot_courves(x, y1, y2, "x+y=10", "x+2y=12", "Solution")

"""'evaluale_sist_ec_2': Función que evalúa el sistema de ecuaciones 2 anteriores

1. Genera los puntos del eje $x$ para evaluar las funciones
2. 'sist_ec_2' evalúa el sistema de ecuaciones 2 con los puntos del arreglo/vector $x$.
3. 'plot_courves' grafica las curvas del sistema de ecuaciones 2.
"""

def evaluale_sist_ec_2():
    #general los valores de x para evaluar las fuinciones

    x = gen_x_values(low_limit=-10, high_limit= 15, num_samples= 30)

    y1, y2 = sist_ec_2(x)

    plot_courves(x, y1, y2, "x+y=10", "2x+2y=20", "Solution")

"""`evaluale_sist_ec_3` : Funcion que evalua el sistema de ecuacuiones 3 anteriores

1.   Genera los puntos del eje $x$ para evaluar las funciones.
2.   `sist_ec_3` evalua el sistema de ecuaciones 2 con los puntos del arreglo/vector $x$.
3.   `plot_courves` grafica las curvas del sistema de ecuaciones 3.
"""

def evaluale_sist_ec_3():
    #general los valores de x para evaluar las fuinciones

    x = gen_x_values(low_limit=-10, high_limit= 15, num_samples= 30)

    y1, y2 = sist_ec_3(x)

    plot_courves(x, y1, y2, "x+y=10", "2x+2y=24", "Solution")

"""<h2> Evaluar y graficas sistema de ecuaciones 2</h2>"""

evaluale_sist_ec_2()

"""<h2> Evaluar y graficas sistema de ecuaciones 3</h2>"""

evaluale_sist_ec_3()